# OS
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    set(M_OS_WINDOWS 1)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    set(M_OS_UNIX 1)
    set(M_OS_LINUX 1)
else()
    message(FATAL_ERROR "Unsupported operating system")
    return()
endif()

# ARCHITECTURE (note: this test won't work for cross-compilation)
include(CheckTypeSize)
check_type_size(void* SIZEOF_VOID_PTR)
if("${SIZEOF_VOID_PTR}" STREQUAL "4")
    set(ARCH_32BITS 1)
    set(M_ARCH_NAME "32bit")
elseif("${SIZEOF_VOID_PTR}" STREQUAL "8")
    set(ARCH_64BITS 1)
    set(M_ARCH_NAME "64bit")
else()
    message(FATAL_ERROR "Unsupported architecture")
    return()
endif()

# COMPILER
if(CMAKE_CXX_COMPILER MATCHES ".*clang[+][+]" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
   execute_process(COMMAND "${CMAKE_CXX_COMPILER}" "--version" OUTPUT_VARIABLE CLANG_VERSION_OUTPUT)
   string(REGEX REPLACE ".*clang version ([0-9]+\\.[0-9]+).*" "\\1" M_CLANG_VERSION "${CLANG_VERSION_OUTPUT}")
   set(M_COMPILER_NAME "clang ${M_CLANG_VERSION}")
   set(M_CPP_17_COMPILER_FLAG "-std=c++1z -Wc++1z-extensions")
elseif(CMAKE_COMPILER_IS_GNUCXX)
    execute_process(COMMAND "${CMAKE_CXX_COMPILER}" "-dumpversion" OUTPUT_VARIABLE GCC_VERSION_OUTPUT)
    string(REGEX REPLACE "([0-9]+\\.[0-9]+).*" "\\1" M_GCC_VERSION "${GCC_VERSION_OUTPUT}")
    execute_process(COMMAND "${CMAKE_CXX_COMPILER}" "--version" OUTPUT_VARIABLE GCC_COMPILER_VERSION)
    string(REGEX MATCHALL ".*(tdm[64]*-[1-9]).*" M_COMPILER_GCC_TDM "${GCC_COMPILER_VERSION}")
    execute_process(COMMAND "${CMAKE_CXX_COMPILER}" "-dumpmachine" OUTPUT_VARIABLE GCC_MACHINE)
    string(STRIP "${GCC_MACHINE}" GCC_MACHINE)

    set(M_COMPILER_NAME "g++ ${GCC_VERSION_OUTPUT}")
    set(M_CPP_17_COMPILER_FLAG "-std=c++1z")
else()
    message(FATAL_ERROR "Unsupported compiler")
    return()
endif()
